// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/rescript/lib/es6/curry.js";

function unit(prim) {
  return Promise.resolve(prim);
}

function then_(x, fn) {
  return x.then(Curry.__1(fn));
}

function resolve(x) {
  return Promise.resolve({
              TAG: /* Ok */0,
              _0: x
            });
}

function reject(x) {
  return Promise.resolve({
              TAG: /* Error */1,
              _0: x
            });
}

function make(fn) {
  return new Promise((function (resolve, reject) {
                return Curry._2(fn, (function (x) {
                              return resolve({
                                          TAG: /* Ok */0,
                                          _0: x
                                        });
                            }), (function (x) {
                              return resolve({
                                          TAG: /* Error */1,
                                          _0: x
                                        });
                            }));
              }));
}

function flatMap(x, fn) {
  return x.then(function (arg) {
              if (arg.TAG === /* Ok */0) {
                return Curry._1(fn, arg._0);
              } else {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: arg._0
                          });
              }
            });
}

function map(x, fn) {
  return flatMap(x, (function (x) {
                var x$1 = Curry._1(fn, x);
                return Promise.resolve({
                            TAG: /* Ok */0,
                            _0: x$1
                          });
              }));
}

function join(x) {
  return flatMap(x, (function (x) {
                return x;
              }));
}

function $$finally(x, fn) {
  return x.then(function (x) {
              Curry._1(fn, x);
              return Promise.resolve(undefined);
            });
}

function tap(x, fn) {
  return x.then(function (x) {
              Curry._1(fn, x);
              return Promise.resolve(x);
            });
}

function tapOk(x, fn) {
  return tap(x, (function (x) {
                if (x.TAG === /* Ok */0) {
                  return Curry._1(fn, x._0);
                }
                
              }));
}

function tapError(x, fn) {
  return tap(x, (function (x) {
                if (x.TAG === /* Ok */0) {
                  return ;
                } else {
                  return Curry._1(fn, x._0);
                }
              }));
}

export {
  unit ,
  then_ ,
  resolve ,
  reject ,
  make ,
  flatMap ,
  map ,
  join ,
  $$finally ,
  tap ,
  tapOk ,
  tapError ,
  
}
/* No side effect */
